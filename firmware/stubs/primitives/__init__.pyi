# primitives/__init__.pyi - Type stubs for primitives package

from typing import Any, Callable, Coroutine, Tuple, TypeVar

_T = TypeVar("_T")

# Type for coroutines
type_coro: type

def launch(func: Callable[..., Any], tup_args: Tuple[Any, ...]) -> Any:
    """
    Launch a function or coroutine with arguments.

    If a callback is passed, run it and return.
    If a coroutine is passed, initiate it and return.
    """
    ...

def set_global_exception() -> None:
    """Set global exception handler for asyncio loop."""
    ...

# Lazy-loaded classes from submodules
class Delay_ms:
    """Delay timer class."""
    def __init__(self, func: Callable[..., Any] | None = None, args: Tuple[Any, ...] = ...) -> None: ...
    def trigger(self, duration: int) -> None: ...
    def stop(self) -> None: ...
    def __call__(self) -> bool: ...
    def callback(self, func: Callable[..., Any], args: Tuple[Any, ...] = ...) -> None: ...

class Pushbutton:
    """Debounced pushbutton handler with press/release/long/double-click support."""
    debounce_ms: int
    long_press_ms: int
    double_click_ms: int

    def __init__(self, pin: Any, suppress: bool = False, sense: int | None = None) -> None: ...
    def press_func(self, func: Callable[..., Any] | None = False, args: Tuple[Any, ...] = ...) -> None: ...
    def release_func(self, func: Callable[..., Any] | None = False, args: Tuple[Any, ...] = ...) -> None: ...
    def double_func(self, func: Callable[..., Any] | None = False, args: Tuple[Any, ...] = ...) -> None: ...
    def long_func(self, func: Callable[..., Any] | None = False, args: Tuple[Any, ...] = ...) -> None: ...
    def rawstate(self) -> bool: ...
    def __call__(self) -> bool: ...
    def deinit(self) -> None: ...

class ESP32Touch(Pushbutton):
    """ESP32 capacitive touch sensor handler."""
    thresh: int

    @classmethod
    def threshold(cls, val: int) -> None: ...
    def __init__(self, pin: Any, suppress: bool = False) -> None: ...
    def rawstate(self) -> bool: ...
